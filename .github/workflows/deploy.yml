name: Deploy MediaFlow

on:
  push:
    branches: [main]
    paths:
      - "src/api/**"
      - "functions/**"
      - "src/worker/**"
      - ".github/workflows/deploy.yml"
  workflow_dispatch:

concurrency:
  group: mediaflow-deploy
  cancel-in-progress: true

env:
  API_APP: mf-api-1757550168
  FUNC_APP: mf-func-1757550168
  ACR_LOGIN_SERVER: acrmediaflow1757550168.azurecr.io

jobs:
  deploy-api:
    name: Web App (API)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Write the publish profile XML from the GitHub secret to a file
      - name: Write API publish profile
        run: |
          cat > api_profile.xml <<'EOF'
          ${{ secrets.WEBAPP_PUBLISH_PROFILE }}
          EOF

      # Parse the correct publishProfile block (prefer ZipDeploy, fallback to MSDeploy)
      - name: Parse publish profile for Kudu creds
        run: |
          python - <<'PY' > pp.env
          import xml.etree.ElementTree as ET, sys
          xml = open('api_profile.xml','r',encoding='utf-8').read()
          root = ET.fromstring(xml)
          # prefer ZipDeploy, then MSDeploy
          picks = [p for p in root.findall('publishProfile') if p.get('publishMethod') in ('ZipDeploy','MSDeploy')]
          if not picks:
              print("ERROR=NoZipOrMSDeploy", file=sys.stderr); sys.exit(1)
          p = picks[0]
          kudu = (p.get('publishUrl') or '').replace(':443','')
          user = p.get('userName') or ''
          pwd  = p.get('userPWD') or ''
          app  = p.get('msdeploySite') or ''
          print(f'KUDU_URL={kudu}')
          print(f'DEPLOY_USER={user}')
          print(f'DEPLOY_PASS={pwd}')
          print(f'APP_NAME={app}')
          PY
          cat pp.env >> $GITHUB_ENV
          echo "Using app: $APP_NAME"
          echo "Using Kudu: $KUDU_URL"

      - name: Zip API
        run: |
          cd src/api
          zip -r ../api.zip .
          cd ../..

      - name: Deploy API via Kudu ZipDeploy
        run: |
          curl -sSf -u "$DEPLOY_USER:$DEPLOY_PASS" \
            -X POST "https://${{ env.KUDU_URL }}/api/zipdeploy" \
            --data-binary @src/api.zip
          echo "Deployed to https://$APP_NAME.azurewebsites.net" >> $GITHUB_STEP_SUMMARY

  deploy-functions:
    name: Function App (blob â†’ Service Bus)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Zip functions
        run: |
          cd functions
          zip -r ../functions.zip .
          cd ..

      - name: Deploy Functions
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ env.FUNC_APP }}
          publish-profile: ${{ secrets.FUNCAPP_PUBLISH_PROFILE }}
          package: functions.zip

  build-worker:
    name: Build & push worker image (ACR)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build & push image
        run: |
          set -e
          TAG="worker-${GITHUB_SHA::7}"
          docker build -f src/worker/Dockerfile -t "$ACR_LOGIN_SERVER/mediaflow-worker:$TAG" src/worker
          docker tag  "$ACR_LOGIN_SERVER/mediaflow-worker:$TAG" "$ACR_LOGIN_SERVER/mediaflow-worker:worker-ci"
          docker push "$ACR_LOGIN_SERVER/mediaflow-worker:$TAG"
          docker push "$ACR_LOGIN_SERVER/mediaflow-worker:worker-ci"

      - name: Next step (manual one-liner)
        run: |
          echo "Update the Container App to the new image with:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "az containerapp update -g rg-mediaflow-dev -n mf-worker-ca --image $ACR_LOGIN_SERVER/mediaflow-worker:worker-ci" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
